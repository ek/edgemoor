package wolken.edgemoor{	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.display.MovieClip;	import flash.text.TextField;	import flash.text.TextFormat;	import fl.transitions.Tween;	import fl.transitions.TweenEvent;	import fl.transitions.easing.*;	import flash.utils.Timer;	import flash.events.TimerEvent;	import caurina.transitions.*;	import flash.events.MouseEvent;	public class EdgemoorMain extends EventDispatcher {		public var status:String = "not_started";		public var textStatus:String = "down";		private var _config:EdgemoorConfig;		private var _loader:EdgemoorLoader;		private var _intro:EdgemoorIntro;		private var _document:MovieClip;		private var ready = false;		private var i:int;		public var currentIndex;		public var previousIndex;		public var nextStep:String = "";		public var delayTime:int = 2;		private var angleTL:MovieClip;		private var angleTR:MovieClip;		private var angleBL:MovieClip;		private var angleBR:MovieClip;		private var imageClip:MovieClip;		private var _textFormat:TextFormat;		private var _copyFormat:TextFormat;		private var cropClip:MovieClip;		private var copyClip:MovieClip;		private var _buttons:Array;		private var images:Array;		private var loadTimer:Timer;		public function EdgemoorMain( config, loader, intro, document ) {			_loader = loader;			_config = config;			_intro = intro;			_document = document;			angleTL = _document.angleTL;			angleTR = _document.angleTR;			angleBL = _document.angleBL;			angleBR = _document.angleBR;			_buttons = new Array();			_buttons.push(_document.button_1);			_buttons.push(_document.button_2);			_buttons.push(_document.button_3);			_buttons.push(_document.button_4);			_textFormat = _buttons[0].text_txt.getTextFormat();			imageClip = _document.image_mc;			images = new Array();			cropClip = _document.crop_mc;			copyClip = _document.copy_mc;			_copyFormat = copyClip.text_txt.getTextFormat();			_loader.addEventListener( Event.COMPLETE, loaderComplete );			_intro.addEventListener( Event.COMPLETE, introComplete);		}		private function loaderComplete(event:Event):void {			ready = true;		}		private function checkLoader(event:TimerEvent):void {			if (ready == true) {				loadTimer.stop();				startMeUp();			}		}		private function introComplete(event:Event):void {			if (ready == false) {				loadTimer = new Timer( 200 );				loadTimer.addEventListener( TimerEvent.TIMER, checkLoader );				loadTimer.start();			} else {				startMeUp();			}			// activate the events		}		private function startMeUp():void {			loadButtons();			// populate the images but hide them all			images.push( _intro.images[0] );// take this one from the intro			for (i=0; i<_config.states.length; i++) {				var imageNum = _config.introFrames.length + i;				var newImage = imageClip.addChild( _loader.images[imageNum].sprite );				newImage.alpha = 0;				images.push(newImage);			}			currentIndex = 0;		}		private function loadButtons():void {			// load up the buttons			for (i=0; i< _buttons.length; i++) {				var targetButton = _buttons[i];				// change the text				targetButton.text_txt.text = _config.states[i]['button'];				//trace( _config.states[i]['button'] );				targetButton.text_txt.setTextFormat(_textFormat);				// hide the orange				targetButton.orange_mc.alpha = 0;				// animate it up				var delayTime = i * .25;				Tweener.addTween( targetButton, { y: 325, time: .25, transition:"easeoutBack", delay: delayTime });				// capture the click event				targetButton.id = i + 1;				targetButton.button.addEventListener( MouseEvent.CLICK, buttonClick );			}		}		private function buttonClick( event:Event ) {			//trace("click: " + event.target.parent.id);			var newID = event.target.parent.id;			if (newID != currentIndex && status != "working" ) {				changeState(newID);			}		}		private function changeState( id:int ) {			previousIndex = currentIndex;			currentIndex = id;			nextStep = "start";			takeNextStep();		}		private function takeNextStep():void {			switch (nextStep) {				case "start" :					status = "working";					changeButton(currentIndex);					delayTime = 0;					hideText();					nextStep = "hideimage";					break;				case "hideimage" :					delayTime = 0;					hideImage(previousIndex);					nextStep = "showimage";					break;				case "showimage" :					delayTime = 0;					showImage(currentIndex);					nextStep = "showtext";					break;				case "showtext" :					delayTime = 0;					showText(currentIndex);					nextStep = "done";					break;				case "done" :					status = "ready";					break;			}		}		private function changeButton( id:int ) {			for (i=0; i<_buttons.length; i++) {				_buttons[i].orange_mc.alpha = 0;			}			_buttons[id - 1].orange_mc.alpha = 1;		}		private function showText(id):void {			copyClip.text_txt.text = _config.states[id-1]['text'];			copyClip.text_txt.setTextFormat(_copyFormat);			if (id < 3) {				copyClip.x = 0;			} else {				copyClip.x = 340;			}			Tweener.addTween(copyClip, { y: 0, time:.5, transition:"easeoutExpo", onComplete: takeNextStep, delay: delayTime });		}		private function hideText():void {			Tweener.addTween(copyClip, { y: 351, time:.5, transition:"easeoutExpo", onComplete: takeNextStep, delay: delayTime });		}		private function showImage( imageNumber:int ):void {			cropClip.scaleX = .25;			cropClip.scaleY = .25;			var targetImage =  images[ imageNumber ];						trace(imageNumber);			targetImage.alpha = 0;			Tweener.addTween(targetImage, {alpha:1,time:.5, transition:"easeoutExpo", onComplete: takeNextStep, delay: delayTime });			Tweener.addTween( cropClip, { scaleX: 1, scaleY: 1, time: .5, transition:"easeoutExpo", delay: delayTime });		}		private function hideImage( imageNumber:int ):void {			var targetImage =  images[ imageNumber ];			Tweener.addTween(targetImage, {alpha:0,time:.5, transition:"easeoutExpo", onComplete: takeNextStep, delay: delayTime });			Tweener.addTween( cropClip, { scaleX: .5, scaleY: .25, time: .5, transition:"easeoutExpo", delay: delayTime });		}		/*		private function showText( textNumber:int ):void {		var textValue = _config.introFrames[textNumber]['text'];		_texto.text = textValue;		_texto.setTextFormat( _textFormat );		Tweener.addTween( _document.centertext_mc, { alpha: 1, time:.5,  onComplete: takeNextStep, delay: delayTime  } );		moveAnglesIn();		}		private function hideText( textNumber:int ):void {		Tweener.addTween( _document.centertext_mc, { alpha: 0, time:.5,  onStart: takeNextStep, delay: delayTime } );		moveAnglesOut();		}		private function moveAnglesIn() {				Tweener.addTween(angleTL, {x:135, y:125,time:.5, transition:"easeoutExpo", delay: delayTime});		Tweener.addTween(angleTR, {x:395, y:125,time:.5, transition:"easeoutExpo", delay: delayTime});		Tweener.addTween(angleBR, {x:395, y:225,time:.5, transition:"easeoutExpo", delay: delayTime});		Tweener.addTween(angleBL, {x:135, y:225,time:.5, transition:"easeoutExpo", delay: delayTime});				}				private function moveAnglesOut() {				Tweener.addTween(angleTL, {x:-10, y:-10,time:.5, transition:"easeoutExpo", delay: delayTime});		Tweener.addTween(angleTR, {x:540, y:-10,time:.5, transition:"easeoutExpo", delay: delayTime});		Tweener.addTween(angleBR, {x:540, y:360,time:.5, transition:"easeoutExpo", delay: delayTime});		Tweener.addTween(angleBL, {x:-10, y:360,time:.5, transition:"easeoutExpo", delay: delayTime});				}		private function lastFrame() {		cropClip.scaleX = .25;		cropClip.scaleY = .25;		var targetImage = images[0];		targetImage.alpha = 0;		Tweener.addTween(targetImage, {alpha:1,time:.5, transition:"easeoutExpo" });		Tweener.addTween( cropClip, { scaleX: 1, scaleY: 1, time: .5, transition:"easeoutExpo"});		moveAnglesOut();		}*/	}}
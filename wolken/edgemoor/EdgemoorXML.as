package wolken.edgemoor {		import flash.events.Event;	import flash.events.EventDispatcher;		import flash.net.*;	import flash.xml.*;	import flash.errors.IOError;	import flash.events.IOErrorEvent;			public class EdgemoorXML extends EventDispatcher {			private var _xmlConfigURL:String;		private var _loader:URLLoader;		private var _xml:XML;		private var i:int;		private var _configObject:EdgemoorConfig;			public function EdgemoorXML( xmlURL, configObject ) {						_xmlConfigURL = xmlURL;			_configObject = configObject;									_loader = new URLLoader();			_loader.dataFormat = URLLoaderDataFormat.TEXT;			_loader.addEventListener( Event.COMPLETE, handleXMLComplete );			_loader.addEventListener( IOErrorEvent.IO_ERROR, handleIOError );			_loader.load( new URLRequest( _xmlConfigURL ) );					}		private function handleIOError() {					}				private function handleXMLComplete( event:Event ):void {						try {				_xml = new XML(event.target.data);				parseXML(_xml);			}			catch ( e:TypeError ) {				trace('no go on the xml yo.');				trace(e.message);			}						}				private function parseXML( xmlData ) {			//trace(xmlData);			_xml = new XML(xmlData);						//trace(xmlData);						// fill out the config object with the necessary information						// start with intro			var delayTime:int = _xml.intro.@delaytime;			_configObject.delayTime = delayTime;			var frameList:XMLList = _xml.intro.frame;			var numFrames:int = frameList.length();			//trace ("framelist length: " + frameList.length());						// add each frame to the config frames array			for(i=0; i < numFrames; i++ ) {								var newFrame = new Array();				var frameNode = frameList[i];				newFrame['url'] = frameNode.@url;				newFrame['text'] = frameNode.text();				// trace( newFrame['url'] + " " + newFrame['text']);				_configObject.introFrames.push(newFrame);							}						// now we bring in the button states			var stateList:XMLList = _xml.states.state;			var numStates:int = stateList.length();						// add each state			for(i=0; i < numStates; i++ ) {								var newState = new Array();				var stateNode = stateList[i];								newState['text'] = stateNode.description.text();				newState['button'] = stateNode.button.text();				newState['url'] = stateNode.image.@url;				// trace( newState['url'] + " " + newState['texto'] + " " + newState['button'] );				_configObject.states.push( newState );							}						//_configObject.introFrames.push(newFrame);						dispatchEvent(new Event(Event.COMPLETE));					}		}}